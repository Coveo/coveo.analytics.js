name: Migrated Jenkins
on:
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
    inputs:
      FORCE_DEPLOY:
        description: Forces the deploy, even if the last commit is a version bump

jobs:
  jenkins:
    name: Migrated from Jenkins
    runs-on: [ coveo, linux, x64, ec2 ]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Check if should skip
        id: skip
        if: 'inputs.FORCE_DEPLOY == false'
        run: |
          commitMessage=$(git log -1 --pretty=%B | tr -d '\n')
          if [[ $commitMessage == *"[version bump]"* ]]; then
          echo "skipRemainingStages=true" >> "$GITHUB_ENV"
          echo 'Skipping this build because it was triggered by a version bump.'
          else
          echo "skipRemainingStages=false" >> "$GITHUB_ENV"
          echo 'Not a version bump, the build will proceed.'
          fi

      - name: Setup Node.js
        if: '!env.skipRemainingStages'
        uses: actions/setup-node@v4
        with:
          registry-url: 'https://registry.npmjs.org'

      - name: Bump version
        if: '!env.skipRemainingStages'
        run: |
          npm version patch -m "[version bump] Automated release to v%s"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Build
        if: '!env.skipRemainingStages'
        run: |
          npm install
          npm run build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Test
        if: '!env.skipRemainingStages'
        run: |
          npm run test
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Deployment Pipeline (setup variables)
        if: '!env.skipRemainingStages'
        run: |
          npm publish --dry-run
          npm run prepare-deploy
          echo "PACKAGE_JSON_MAJOR_MINOR_PATCH_VERSION=${./read.version.sh patch}=" >> "$GITHUB_ENV"
          echo "PACKAGE_JSON_MAJOR_MINOR_VERSION=${./read.version.sh minor}" >> "$GITHUB_ENV"
          echo "PACKAGE_JSON_MAJOR_VERSION=${./read.version.sh major}" >> "$GITHUB_ENV"
          echo "TF_VAR_package_json_major_version=${PACKAGE_JSON_MAJOR_VERSION}" >> "$GITHUB_ENV"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - uses: coveo-platform/deployment-pipeline-actions/setup-cli@main

      - name: Deployment Pipeline (create package)
        run: |
          deployment-package --version '$PACKAGE_JSON_MAJOR_VERSION' \
          --package-suffix '$PACKAGE_JSON_MAJOR_MINOR_PATCH_VERSION' \
          --resolve 'PACKAGE_JSON_MAJOR_MINOR_PATCH_VERSION=$PACKAGE_JSON_MAJOR_MINOR_PATCH_VERSION' \
          --resolve 'PACKAGE_JSON_MAJOR_MINOR_VERSION=$PACKAGE_JSON_MAJOR_MINOR_VERSION' \
          --resolve 'PACKAGE_JSON_MAJOR_VERSION=$PACKAGE_JSON_MAJOR_VERSION' \
          --resolve 'TF_VAR_package_json_major_version=$TF_VAR_package_json_major_version' \
          --with-deploy

      #      - name: Deploy Pipeline (create package)
      #        uses: coveo-platform/deployment-pipeline-actions/create-package@main
      #        with:
      #            name-suffix: '${{ env.PACKAGE_JSON_MAJOR_MINOR_PATCH_VERSION }}'

      # Running deployment-package package create
      #      --version '2'
      #      --package-suffix '2.30.8'
      #      --resolve 'PACKAGE_JSON_MAJOR_MINOR_PATCH_VERSION=2.30.8'
      #      --resolve 'PACKAGE_JSON_MAJOR_MINOR_VERSION=2.30'
      #      --resolve 'PACKAGE_JSON_MAJOR_VERSION=2'
      #      --resolve 'TF_VAR_package_json_major_version=2'
      #      --with-deploy

      - name: Publish
        shell: bash
        run: |
          npm publish
          git config --global user.email "gha@coveo.com"
          git config --global user.name "Github Actions"
          git add .
          git push --all

