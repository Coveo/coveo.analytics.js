#!groovy

library(
  identifier: 'jenkins-common-lib@v1.6',
  retriever: modernSCM(github(credentialsId: 'github-app-dev', repository: 'jenkins-common-lib', repoOwner: 'coveo')),
  changelog: false
)

pipeline {
  agent {
    dockerfile {
      dir 'cypress'
      args '--cap-add=SYS_ADMIN'
      label 'fts_qa'
    }
  }

  parameters {
    booleanParam(name: 'ONLY_SEND_SLACK_ON_FAILURE', defaultValue: true, description: 'Whether to only send a slack message on failure')
    string(name: 'VERSION', defaultValue: '2', description: 'The version to test')
    string(name: 'TOKEN_ID', defaultValue: 'coveo-analytics-send-to-dev-commercestore-api-key', description: 'The API Key used to push analytics')
    string(name: 'ENDPOINT', defaultValue: 'https://platformdev.cloud.coveo.com/rest/ua', description: 'The endpoint on which to send the analytics')
  }

  environment {
    CYPRESS_version = "${env.VERSION}"
    CYPRESS_endpoint = "${env.ENDPOINT}"
    BUILD_NODE_VERSION = 'NodeJS Latest'
    HOME = "${env.WORKSPACE}"
  }

  options {
    ansiColor('xterm')
    timestamps()
    disableConcurrentBuilds()
    timeout(time: 45, unit: 'MINUTES')
  }

  stages {
    stage('Setup') {
      steps {
        script {
          def nodeHome = tool name: env.BUILD_NODE_VERSION, type: 'nodejs'
          env.PATH = "${nodeHome}/bin:${env.PATH}"
          dir('cypress') {
            sh 'npm install'
          }
        }
      }
    }

    stage('Test') {
      steps {
        dir('cypress') {
          withCredentials([
            string(credentialsId: env.TOKEN_ID, variable: 'CYPRESS_token')
          ]) {
            sh 'rm -rf reports'
            sh 'npm run cypress'
          }
        }
      }
      post {
        always {
            junit testResults: 'cypress/reports/*.xml'
        }
        failure {
            archiveArtifacts(artifacts: 'cypress/screenshots/**/*.png', allowEmptyArchive: false)
        }
      }
    }
  }

  post {
    always {
      script {
        if (!params.ONLY_SEND_SLACK_ON_FAILURE || currentBuild.currentResult != 'SUCCESS') {
          def color = currentBuild.currentResult == 'SUCCESS' ? '#00FF00' : '#FF0000';
          def message = "coveo.analytics health check ${currentBuild.currentResult} on version ${env.VERSION} (<${env.BUILD_URL}|#${env.BUILD_NUMBER}>)"
          notifySlack(
            color: color,
            message: message
          )
        }
      }
    }
  }
}


def notifySlack(options) {
    // Cannot use `notify.sendSlackWithChannel` because it hardcodes "tokenCredentialId = "jenkinsbot"
    options.channel = "#commerceteambuilds";
    options.botUser = true;
    options.tokenCredentialId = "slack_jenkinsbot";
    return slackSend(options);
}